package com.example.demo.controller;

import com.example.demo.dto.EstatisticasNotificacaoDTO;
import com.example.demo.dto.NotificacaoDTO;
import com.example.demo.model.TipoNotificacao;
import com.example.demo.service.NotificacaoAutomaticaService;
import com.example.demo.service.NotificacaoService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/notificacoes")
@RequiredArgsConstructor
@CrossOrigin(origins = "*")
public class NotificacaoController {
    
    private final NotificacaoService notificacaoService;
    private final NotificacaoAutomaticaService notificacaoAutomaticaService;
    
    /**
     * Lista todas as notifica√ß√µes do usu√°rio (n√£o expiradas)
     */
    @GetMapping("/usuario/{usuarioId}")
    public ResponseEntity<List<NotificacaoDTO>> listarNotificacoes(@PathVariable Long usuarioId) {
        List<NotificacaoDTO> notificacoes = notificacaoService.listarNotificacoesDoUsuario(usuarioId);
        return ResponseEntity.ok(notificacoes);
    }
    
    /**
     * Lista apenas notifica√ß√µes n√£o lidas do usu√°rio
     */
    @GetMapping("/usuario/{usuarioId}/nao-lidas")
    public ResponseEntity<List<NotificacaoDTO>> listarNotificacoesNaoLidas(@PathVariable Long usuarioId) {
        List<NotificacaoDTO> notificacoes = notificacaoService.listarNotificacoesNaoLidas(usuarioId);
        return ResponseEntity.ok(notificacoes);
    }
    
    /**
     * Lista notifica√ß√µes por tipo espec√≠fico
     */
    @GetMapping("/usuario/{usuarioId}/tipo/{tipo}")
    public ResponseEntity<List<NotificacaoDTO>> listarNotificacoesPorTipo(
            @PathVariable Long usuarioId, 
            @PathVariable TipoNotificacao tipo) {
        List<NotificacaoDTO> notificacoes = notificacaoService.listarNotificacoesPorTipo(usuarioId, tipo);
        return ResponseEntity.ok(notificacoes);
    }
    
    /**
     * Conta quantas notifica√ß√µes n√£o lidas o usu√°rio tem
     */
    @GetMapping("/usuario/{usuarioId}/contador")
    public ResponseEntity<Map<String, Object>> contarNotificacoesNaoLidas(@PathVariable Long usuarioId) {
        Long contador = notificacaoService.contarNotificacoesNaoLidas(usuarioId);
        Map<String, Object> resultado = Map.of(
            "naoLidas", contador,
            "temNovas", contador > 0
        );
        return ResponseEntity.ok(resultado);
    }
    
    /**
     * Obt√©m estat√≠sticas completas das notifica√ß√µes do usu√°rio
     */
    @GetMapping("/usuario/{usuarioId}/estatisticas")
    public ResponseEntity<EstatisticasNotificacaoDTO> obterEstatisticas(@PathVariable Long usuarioId) {
        EstatisticasNotificacaoDTO estatisticas = notificacaoService.obterEstatisticas(usuarioId);
        return ResponseEntity.ok(estatisticas);
    }
    
    /**
     * Marca uma notifica√ß√£o espec√≠fica como lida
     */
    @PatchMapping("/{notificacaoId}/marcar-lida")
    public ResponseEntity<NotificacaoDTO> marcarComoLida(@PathVariable Long notificacaoId) {
        NotificacaoDTO notificacao = notificacaoService.marcarComoLida(notificacaoId);
        return ResponseEntity.ok(notificacao);
    }
    
    /**
     * Marca todas as notifica√ß√µes do usu√°rio como lidas
     */
    @PatchMapping("/usuario/{usuarioId}/marcar-todas-lidas")
    public ResponseEntity<String> marcarTodasComoLidas(@PathVariable Long usuarioId) {
        notificacaoService.marcarTodasComoLidas(usuarioId);
        return ResponseEntity.ok("Todas as notifica√ß√µes foram marcadas como lidas");
    }
    
    /**
     * For√ßa a execu√ß√£o das verifica√ß√µes autom√°ticas de notifica√ß√µes (√∫til para testes/admin)
     */
    @PostMapping("/verificar-automaticas")
    public ResponseEntity<String> executarVerificacaoManual() {
        notificacaoAutomaticaService.executarVerificacaoManual();
        return ResponseEntity.ok("Verifica√ß√£o autom√°tica de notifica√ß√µes executada com sucesso");
    }
    
    /**
     * Endpoint para obter todos os tipos de notifica√ß√£o dispon√≠veis
     */
    @GetMapping("/tipos")
    public ResponseEntity<List<Map<String, String>>> listarTiposNotificacao() {
        List<Map<String, String>> tipos = List.of(
            Map.of("codigo", "CONTA_VENCENDO", "descricao", "Conta pr√≥xima do vencimento", "icone", "‚è∞"),
            Map.of("codigo", "CONTA_VENCIDA", "descricao", "Conta vencida", "icone", "üö®"),
            Map.of("codigo", "DIVIDA_PENDENTE", "descricao", "D√≠vida pendente", "icone", "üí∞"),
            Map.of("codigo", "DIVISAO_PENDENTE", "descricao", "Divis√£o pendente", "icone", "üí≥"),
            Map.of("codigo", "PAGAMENTO_RECEBIDO", "descricao", "Pagamento recebido", "icone", "‚úÖ"),
            Map.of("codigo", "CONVITE_RECEBIDO", "descricao", "Convite recebido", "icone", "üìß"),
            Map.of("codigo", "CONTA_CRIADA", "descricao", "Nova conta criada", "icone", "üìã"),
            Map.of("codigo", "LEMBRETE_PAGAMENTO", "descricao", "Lembrete de pagamento", "icone", "üîî"),
            Map.of("codigo", "SISTEMA", "descricao", "Notifica√ß√£o do sistema", "icone", "‚öôÔ∏è")
        );
        
        return ResponseEntity.ok(tipos);
    }
}
